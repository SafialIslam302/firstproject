optimal binary search tree: 
#include<bits/stdc++.h>
#define INF 30000
using namespace std;
int n;
float p[50];
float A[50][50];
int root[50][50];
float w[50][50];
int main()
{
	float prob;
	int key;
	cout<<"Enter the number of nodes : ";
	cin>>n;
	for(int i=1;i<=n;i++)
	{
	    cout<<"\nKey : ";
	    cin>>key;
		cout<<"\nProbability: ";
		cin>>prob;
		p[key]=prob;
	}
	int j,r1;
	float t;
	for(int i=1;i<=n;i++)
	{
	    A[i][i]=p[i];
        A[i][i-1]=0;
        w[i][i]=p[i];
        root[i][i]=i;
    }
    A[n+1][n]=0;
	for(int l=1;l<=n-1;l++)
	{
	    for(int i=1;i<=n-l;i++)
	    {
            j=i+l;
            A[i][j]=INF;
            w[i][j]=w[i][j-1]+p[j];
            for(r1=i;r1<=j;r1++)
            {
                t=A[i][r1-1]+A[r1+1][j]+w[i][j];
                if(t<A[i][j])
                {
                    A[i][j]=t;
                    root[i][j]=r1;
                }
             }
	     }
	 }
	cout<<"\nCost matrix is\n";
	for(int i=1;i<=n+1;i++)
	{
		for(int j=0;j<=n;j++)
		{
			cout<<setw(5)<<A[i][j]<<"        ";
		}
		cout<<endl;
	}
	cout<<"\nRoot matrix is\n";
	for(int i=1;i<=n;i++)
	{
		for(int j=1;j<=n;j++)
		{
			cout<<root[i][j]<<"  ";
		}
		cout<<endl;
	}
	return 0;
}









/* N - queen problem * /


#include<bits/stdc++.h>
using namespace std;
int board[20];
int cou=1;
int main()
{
    int n,i,j;
    void queen(int row, int n);
    cout<<"Program for queen's using backtracking : \n";
    cout<<"Enter number of queen's : \n";
    cin>>n;
    queen(1,n);
}
void print_board(int n)
{
    int i,j;
    cout<<"\n\nSolution : "<<(cou++);
    cout<<endl<<endl;
    for(i=1;i<=n;i++)
    {
        cout<<i<<"   ";
    }
    for(i=1;i<=n;i++)
    {
        cout<<endl<<endl<<i;
        for(j=1;j<=n;j++)
        {
            if(board[i]==j)
                cout<<"  Q";
            else
                cout<<"  *";
        }
    }
}
int place(int row ,int column)
{
    int i;
    for(i=1;i<=row-1;i++)
    {
        if(board[i]==column)
            return 0;
        else
            if(abs(board[i]-column)==abs(i-row))
                return 0;
    }
    return 1;
}
void queen(int row, int n)
{
    int column;
    for(column=1;column<=n;column++)
    {
        if(place(row,column))
        {
            board[row]=column;
            if(row==n)
                print_board(n);
            else
                queen(row+1,n);
        }
    }
}







/* all pair shortest path floyd warshall */

#include<bits/stdc++.h>
using namespace std;
int min(int,int);
void floyds(int p[10][10],int n) {
    int i,j,k;
    for (k=1;k<=n;k++){
        cout<<"Distance Matrix : "<<endl;
        for (i=1;i<=n;i++){
            for (j=1;j<=n;j++){
                if(i==j){
                    p[i][j]=0;
                }
                else{
                    p[i][j]=min(p[i][j],p[i][k]+p[k][j]);
                }
                cout<<p[i][j]<<"  ";
            }
            cout<<endl;
        }
        cout<<endl;
    }
}
int min(int a,int b) {
    if(a<b)
        return(a);
    else
        return(b);
}
int main()
{
    int p[10][10],w,n,e,u,v,i,j;;
    cout<<"\n Enter the number of vertices:";
    cin>>n;
    cout<<"\n Enter the number of edges:\n";
    scanf("%d",&e);
    for(i=1;i<=n;i++){
        for (j=1;j<=n;j++)
            p[i][j]=999;
    }
    for (i=1;i<=e;i++) {
        cout<<"\n Enter the end vertices of edge" <<i <<" with its weight \n";
        cin>>u>>v>>w;
        p[u][v]=w;
    }
    cout<<"\n Matrix of input data:\n";
    for (i=1;i<=n;i++) {
        for (j=1;j<=n;j++)
            cout<<"\t"<<p[i][j];
        cout<<"\n";
    }
    floyds(p,n);
    cout<<"\n Transitive closure:\n";
    for (i=1;i<=n;i++) {
        for (j=1;j<=n;j++)
            cout<<"\t"<<p[i][j];
        cout<<"\n";
    }
    cout<<"\n The shortest paths are:\n";
    for (i=1;i<=n;i++)
        for (j=1;j<=n;j++) {
        if(i!=j)
            cout<<"\n <"<<i<<","<<j<<" > "<<p[i][j];
    }
}







/* Maximum flow */
#include<bits/stdc++.h>
#define MAX_NODES 100  
#define INF 2147483646 
#define UNINITIALIZED -1 

using namespace std;

int capacities[MAX_NODES][MAX_NODES];
int flowPassed[MAX_NODES][MAX_NODES];
vector<int> graph[MAX_NODES];
int parentsList[MAX_NODES];
int Path[MAX_NODES];

int bfs(int startNode, int endNode)
{
     memset(parentsList, UNINITIALIZED, sizeof(parentsList));
     memset(Path, 0, sizeof(Path));
     queue<int> q;
     q.push(startNode);
     parentsList[startNode]=-2;
     Path[startNode]=INF;
     while(!q.empty())
     {
        int currentNode = q.front(); q.pop();
        for(int i=0; i<graph[currentNode].size(); i++)
        {
            int to = graph[currentNode][i];
            if(parentsList[to] == UNINITIALIZED)
            {
                if(capacities[currentNode][to] - flowPassed[currentNode][to] > 0)
                {
                    parentsList[to] = currentNode;
                    Path[to] = min(Path[currentNode],capacities[currentNode][to] - flowPassed[currentNode][to]);
                    if(to == endNode) 
                        return Path[endNode];
                    q.push(to);
                }
            }
        }
    }
    return 0;
}
int edmondsKarp(int startNode, int endNode)
{
     int maxFlow=0;
     while(true)
     {
         int flow=bfs(startNode, endNode);
         if(flow==0)
         {
             break;
         }
         maxFlow +=flow;
         int currentNode=endNode;
         while(currentNode != startNode)
         {
             int previousNode = parentsList[currentNode];
             flowPassed[previousNode][currentNode] += flow;
             flowPassed[currentNode][previousNode] -= flow;
             currentNode=previousNode;
         }
      }
      return maxFlow;
}
int main()
{
     int nodesCount, edgesCount;
     cout<<"Enter node and edge number : "<<endl;
     cin>>nodesCount>>edgesCount;
     int source, sink;
     cout<<"Enter the source and desgination : "<<endl;
     cin>>source>>sink;
     cout<<"From ---> to edge and capacity : "<<endl;
     for(int edge=0; edge<edgesCount; edge++)
     {
          int from, to, capacity;
          cin>>from>>to>>capacity;
          capacities[from][to]=capacity;
          graph[from].push_back(to);
          graph[to].push_back(from);
     }
     int maxFlow = edmondsKarp(source, sink);
     cout<<maxFlow<<endl;
     return 0;
}

/* Bin packing */


#include <iostream>

using namespace std;

int main()
{
    int c,n,m;
    cout << "Enter capacity of bin : ";
    cin >> c;
    cout << "Enter number of bin : ";
    cin >> n;
    int bc[n],b[n][n];
    for(int i=0;i<n;i++)
        bc[i]=0,b[i][0]=0;
    cout << "Enter number of load : ";
    cin >> m;
    int w[m];
    cout << "Enter load weight : \n";
    for(int i=0;i<m;i++)
    {
        cin >> w[i];
        for(int j=0;j<n;j++)
        {if(c-bc[j]>=w[i])
            {
                b[j][++b[j][0]]=w[i];
                bc[j]+=w[i];
                break;
            }
        }
    }
    cout << "ans\n";
    for(int i=0;i<n;i++)
    {
        cout << "bin"<<i+1<<" : ";
        for(int j=1;j<=b[i][0];j++)
            cout << b[i][j] << " ";
        cout << endl;
    }
    return 0;
}

