/ ***** Gauss elimantation method 1****/

#include <bits/stdc++.h>
using namespace std;
string s[3];
int c[3][4];

int power(int a)
{
    int b=1;
    for(int i=1;i<=a;i++)
        b=b*10;
    return b;
}

void det(int i,int j,int k,int l)
{
    char t[100];
    int m=-1,b=1;
    for(int a=k;a<=l;a++)
    {
        if(s[i][a]!=' ')
            t[++m]=s[i][a];
    }
    if(m==-1)
    {
        c[i][j]=1;
        return;
    }
    else if(t[0]=='+')
    {
        if(m==0)
        {
            c[i][j]=1;
            return;
        }
        c[i][j]=0;
        while(b<=m)
        {
            c[i][j]=c[i][j]+(int(t[b])-48)*power(m-b);
            b++;
        }
    }
    else if(t[0]=='-')
    {
        if(m==0)
        {
            c[i][j]=-1;
            return;
        }
        c[i][j]=0;
        while(b<=m)
        {
            c[i][j]=c[i][j]+(int(t[b])-48)*power(m-b);
            b++;
        }
        c[i][j]=-c[i][j];
    }
    else
    {
        c[i][j]=0;
        b=0;
        while(b<=m)
        {
            c[i][j]=c[i][j]+(int(t[b])-48)*power(m-b);
            b++;
        }
    }
}
int main()
{
    int a;
    float x,y=0,z=0,x1,y1,z1,n=0;
    ifstream mf1("ITERATIVE METHOD.txt");
    for(int i=0;i<3;i++)
        getline(mf1,s[i]);
    mf1.close();
    for(int i=0;i<3;i++)
    {
        for(int j=0;j<s[i].size();j++)
        {
            if(s[i][j]=='x')
            {
                det(i,0,0,j-1);
                a=j+1;
            }
            if(s[i][j]=='y')
            {
                det(i,1,a,j-1);
                a=j+1;
            }
            if(s[i][j]=='z')
            {
                det(i,2,a,j-1);
            }
            if(s[i][j]=='=')
            {
                det(i,3,j+1,s[i].size()-1);
            }
        }
    }
    ofstream mf2("ITERATIVE METHOD.txt");
    mf2<< s[0] << endl
        << s[1] << endl
        << s[2] << endl;
    a=1;
    while(1)
    {
        x1=x,y1=y,z1=z;
        x=(float) ((1.0/c[0][0])*(c[0][3]-c[0][1]*y-c[0][2]*z));
        y=(float) ((1.0/c[1][1])*(c[1][3]-c[1][0]*x-c[1][2]*z));
        z=(float) ((1.0/c[2][2])*(c[2][3]-c[2][1]*y-c[2][0]*x));
        mf2<<"Step No:\t :"<<a<<endl;
        mf2<<"X:\t"<<x<<"\tY:\t"<<y<<"\tZ:\t"<<z<<endl<<endl;
        if(a>1)
            if(abs(x1-x)<0.01 && abs(y1-y)<0.01 && abs(z1-z)<0.01)
                break;
        if(n==4)
            break;
        n++;
        a++;
    }
    mf2<<"Total iterator :"<<a<<endl
        << "Solution" << endl
        << "X : " << x << endl
        << "Y : " << y << endl
        << "Z : " << z << endl;
    return 0;
}





/*** Gauss elimantation Method 2***/
#include <bits/stdc++.h>
using namespace std;
int c[3][4];
int main()
{
    int a=1;
    float x,y=0,z=0,x1,y1,z1,n=0;
    for(int i=0;i<3;i++)
    {
        for(int j=0;j<4;j++)
        {
            cin>>c[i][j];
        }
    }
    while(1)
    {
        x1=x,y1=y,z1=z;
        x=(float) ((1.0/c[0][0])*(c[0][3]-c[0][1]*y-c[0][2]*z));
        y=(float) ((1.0/c[1][1])*(c[1][3]-c[1][0]*x-c[1][2]*z));
        z=(float) ((1.0/c[2][2])*(c[2][3]-c[2][1]*y-c[2][0]*x));
        cout<<"Step No:\t :"<<a<<endl;
        cout<<"X:\t"<<x<<"\tY:\t"<<y<<"\tZ:\t"<<z<<endl<<endl;
        if(a>1)
            if(abs(x1-x)<0.0001 && abs(y1-y)<0.0001 && abs(z1-z)<0.0001)
                break;
        a++;
    }
    cout<<"Total iterator :"<<a<<endl
        << "Solution" << endl
        << "X : " << x << endl
        << "Y : " << y << endl
        << "Z : " << z << endl;
    return 0;
} 





/****  False Position Method ****/
#include<bits/stdc++.h>
#include<math.h>
using namespace std;
int a,b,c;
double F(float x,int a,int b,int c)
{
    double r=(a*x*x)+(b*x)+c;
    return r;
}
int main()
{
      float x0,x1,x2,f1,f2,f0;
      int count=0;
      cout<<"Enter the equation : ";
      cin>>a>>b>>c;
      cout<<"\nEnter the value of x0: ";
      cin>>x0;
      cout<<"\nEnter the value of x1: ";
      cin>>x1;
      cout<<"\n    x0\t  x1\tx2\tf0\tf1\t f2"<<endl<<endl;
      do
      {
          f0=F(x0,a,b,c);
          f1=F(x1,a,b,c);
          x2=x0-((f0*(x1-x0))/(f1-f0));
          f2=F(x2,a,b,c);
          cout<<setw(6)<<setprecision(3)<<x0<<"    "<<x1<<"    "<<x2<<"    "<<f0<<"     "<<f1<<"     "<<f2<<endl;
          if(f0*f2<0)
          {
             x1=x2;
          }
          else
          {
             x0 = x2;
          }
      }while(abs(f2)>.000001);
      cout<<"\n\nApp. root is : "<<x2<<endl;
}






 /**** Secant Method ****/
#include<bits/stdc++.h>
using namespace std;
int a,b,c;
double F(float x,int a,int b,int c)
{
    double r=(a*x*x)+(b*x)+c;
    return r;
}
int main()
{
      float x1,x2,x3,f1,f2,t;
      cout<<"Enter the equation : ";
      cin>>a>>b>>c;
      cout<<"\nEnter the value of x1: ";
      cin>>x1;
      cout<<"\nEnter the value of x2: ";
      cin>>x2;
      cout<<"\n  x1\t x2\t x3\t f(x1)\t f(x2)"<<endl;
      do
      {
          f1=F(x1,a,b,c);
          f2=F(x2,a,b,c);
          x3=x2-((f2*(x2-x1))/(f2-f1));
          cout<<setprecision(4)<<setw(5)<<x1<<"\t"<<x2<<"\t"<<x3<<"\t"<<f1<<"\t"<<f2<<endl;
          x1=x2;
          x2=x3;
          if(f2<0)
            t=abs(f2);
          else
            t=f2;
      }while(t>.00001);
      cout<<"\n\nApp.root = "<<x3<<endl;
}






/*** Newton Raphson ***/

#include<iostream>
#include<cmath>
#include<iomanip>
using namespace std;
int a,b,c;
double f(double x,int a,int b,int c)
{
    double r=(a*x*x)+(b*x)+c;
    return r;
}
double fprime(double x,int a,int b)
{
    double q=(2*a*x)+b;
    return q;
}
int main()
{
    double x,x1,fx,fx1;
    cout<<"Enter the equation : ";
    cin>>a>>b>>c;
    cout<<"Enter the initial guess\n";
    cin>>x1;
    double e=.00001;
    fx=f(x,a,b,c);
    fx1=fprime(x,a,b);
    cout<<endl<<"x\t"<<"     x1\t\t "<<" (x1-x)"<<endl<<endl;
    do
    {
        x=x1;
        fx=f(x,a,b,c);
        fx1=fprime(x,a,b);
        x1=x-(fx/fx1);
        cout<<setw(5)<<setprecision(4)<<x<<"        "<<x1<<"           "<<abs(x1-x)<<endl;
    }while (abs(x1-x)>=e);
    cout<<endl<<"The root of the equation is : "<<x1<<endl<<endl;
    return 0;
}









/**** Bisection Method ****/
#include<bits/stdc++.h>
using namespace std;
int a,b,c;
double f(double x)
{
    return (a*x*x)+(b*x)+c;
}
int main()
{
    cout<<"Enter the equation : ";
    cin>>a>>b>>c;
    int xm;
    double xon,xoo,x1,x2,error,root,accuracy;
    double r1s,r1e,r2s,r2e;
    xm = sqrt(pow((b/a),2)-(2*(c/a))) ;
    for(int i=-xm;i<=xm;i++)
    {
        if( ( f((double)i)<0 && f((double)(i+1))>0) || (f((double)i)>0 && f((double)(i+1))<0) )
        {
            r1s = (double)i;
            r1e = (double)(i+1);
        }
    }
    x1 = r1s;
    x2 = r1e;
    for(int i=-xm;i<=xm;i++)
    {
        if ( ( f((double)i)>0 && f((double)(i+1))<0 ) || ( f((double)i)<0 && f((double)(i+1))>0) )
        {
            r2s = (double)i;
            r2e = (double)(i+1);
            break;
        }
    }
    xoo = (x1 +x2)/2;
    accuracy = 0.0001 ;
    int i = 1;
    while(1)
    {
        if(f(xoo) == 0)
        {
            root = xoo;
            break;
        }
        if( f(x1) * f(xoo) < 0 )
        {
            x2 = xoo ;
        }
        else if( f(x2) * f(xoo) < 0 )
        {
            x1 = xoo ;
        }
        xon = (x1 +x2)/2;
        error = abs((xon - xoo)/xon);
        if(error <= accuracy)
        {
            root = xon ;
            break;
        }
        xoo = xon;
        cout<<i++<<"  = "<<xoo<<endl;
    }
    cout<<"First Root is : "<<root<<endl;
    x1 = r2s;
    x2 = r2e;
    xoo = (x1 +x2)/2;
    accuracy = 0.0001 ;
    i = 1;
    while(1)
    {
        if(f(xoo) == 0)
        {
            root = xoo;
            break;
        }
        if( f(x1) * f(xoo) < 0 )
        {
            x2 = xoo ;
        }
        else if( f(x2) * f(xoo) < 0 )
        {
            x1 = xoo ;
        }
        xon = (x1 +x2)/2;
        error = abs((xon - xoo)/xon);
        if(error <= accuracy)
        {
            root = xon ;
            break;
        }
        xoo = xon;
        cout<<i++<<"  = "<<xoo<<endl;
    }
    cout<<"Second Root is : "<<root<<endl;
}








/****** 3 rule method  ******/
#include<iostream>
#include<bits/stdc++.h>
#include<math.h>
using namespace std;
double h,arr[100],num,low,upper;
double arra[100];

double trapezodial(double arr[],int x,double arra[])
{
        double x1=0.0,x2=0.0,x3=0.0,x4=0.0;
        x1= arra[0] + arra[x];
        x2=x1/2;
        for(int i=1;i<x;i++)
            x3=x3+arra[i];
        x4=h*(x2+x3);
        return x4;
}

double onethird(double arr[],int x,double arra[])
{

        double x1=0.0,x2=0.0,x3=0.0,x4=0.0,x5=0.0;
        x1= arra[0]+arra[x];
        for(int i=1;i<x;i+=2)
            x2=x2+arra[i];
        for(int i=2;i<x-1;i+=2)
            x3=x3+arra[i];
        x4=x1+(4*x2)+(2*x3);
        x5=(x4*h)/3.0;
        return x5;
}

double three_eight(double arr[],int x,double arra[])
{
        double x1=0.0,x2=0.0,x3=0.0,x4=0.0,x5=0.0;
        x1= arra[0] + arra[x];
        for(int i=1;i<x;i++){
            if((i%3)==0)
                continue;
            x2=x2+arra[i];
        }
        for(int i=3;i<x-2;i+=3)
            x3=x3 + arra[i];
        x4=x1+(3*x2)+(2*x3);
        x5=(3*h*x4)/8.0;
        return x5;
}
int main()
{
        cout<<"Enter the first and last limit :"<<endl;
        cin>>low>>upper;
        cout<<"Enter the value of h:"<<endl;
        cin>>h;
        int choice;
        arr[0]=low;
        int x=0,y=1;
        while(arr[x]<=upper){
            ++x;
            arr[x]=low+(y*h);
            y++;
            if(arr[x]==upper)
                break;
        }
        for(int i=0;i<=x;i++){
            arra[i]=log(arr[i]);
        }
        cout<<endl<<endl;
        double result1=trapezodial(arr,x,arra);
        cout<<"Final result in trapezoidal rule is : "<<result1<<endl;
        double result2=onethird(arr,x,arra);
        cout<<"Final result in simpson's one-third is: "<<result2<<endl;
        double result3=three_eight(arr,x,arra);
        cout<<"Final result in simpson's three-eight is: "<<result3<<endl;
}











/ ***** Regression linear *****/
#include<iostream>
#include<iomanip>
#include<cmath>
using namespace std;
int main()
{
    int i,j,k,n;
    cout<<"\nEnter the no. of data to be entered:\n";
    cin>>n;
    double x[n],y[n],a,b;
    cout<<"\nEnter the x-axis values:\n";
    for (i=0;i<n;i++)
        cin>>x[i];
    cout<<"\nEnter the y-axis values:\n";
    for (i=0;i<n;i++)
        cin>>y[i];
    double xsum=0,x2sum=0,ysum=0,xysum=0;
    cout<<"Xi\t\tYi\t\tXi^2\t\tXi*Yi"<<endl;
    for (i=0;i<n;i++)
    {
        xsum=xsum+x[i];
        ysum=ysum+y[i];
        x2sum=x2sum+pow(x[i],2);
        xysum=xysum+x[i]*y[i];
        cout<<xsum<<"\t\t"<<ysum<<"\t\t"<<x2sum<<"\t\t"<<xysum<<endl;
    }
    b=((n*xysum)-(xsum*ysum))/(x2sum*n-(xsum*xsum));
    a=(ysum/n)-(b*(xsum/n));
    cout<<"\nThe linear fit line is :\n\n"<<a<<"+"<<b<<"x"<<endl;
    return 0;
}







/**** RK Method ****/
#include <iostream>
#include<bits/stdc++.h>
using namespace std;
float fun(float x,float y)
{
    return (x+y);
}

int main()
{
    float x,x1,y,k1,h,k2,k3,k4,d1;
    int i=1;
    cout<<"Enter the value of x & y:"<<endl;
    cin>>x>>y;
    cout<<"Enter the value of final x:"<<endl;
    cin>>x1;
    cout<<"Enetr the value of h:"<<endl;
    cin>>h;
    for(;x!=x1;)
    {
        k1=h*fun(x,y);
        k2=h*fun(x+(h/2),y+(k1/2));
        k3=h*fun(x+(h/2),y+(k2/2));
        k4=h*fun(x+h,y+k3);
        x=x+h;
        d1=(k1+(2*k2)+(2*k3)+k4)/6;
        y=y+d1;
        cout<<"K1 :"<<k1<<endl;
        cout<<"K2 :"<<k2<<endl;
        cout<<"K3 :"<<k3<<endl;
        cout<<"K4 :"<<k4<<endl;
        cout<<"Result for  x :"<<x<<" value of y is :  "<<y<<endl<<endl;
        i++;
    }
    cout<<endl<<"The final value of x and y is: "<<x<<"   "<<y<<endl;
    return 0;
}







/***** Modified Euler *****/
#include<iostream>
#include<bits/stdc++.h>
using namespace std;
double F(double x,double y)
{
    return (x+y);
}
int main()
{
      double y0,x0,y1,x1,y1_0,a,n,h,f,f1;
      int j,flag;
      cout<<"\nEnter the value of x0: ";
      cin>>x0;
      cout<<"\nEnter the value of y0: ";
      cin>>y0;
      cout<<"\nEnter the value of h: ";
      cin>>h;
      cout<<"\nEnter the value of last point: ";
      cin>>n;
      for(x1=x0+h,j=1; x1<=n+h; x1=x1+h,j++)
      {
            flag=0;
            f=F(x0,y0);
            cout<<"Step no : "<<j<<endl;
            cout<<"x0   " << x1<<"  y0  "<<y0<<endl<<endl;
            y1_0 = y0+(h*f);
            cout<<"y: "<<y1_0<<"    ";
            while(flag!=1)
            {
                f=F(x0,y0);
                f1=F(x1,y1_0);
                cout<<"dy/dx: "<<f1<<endl;
                y1 = y0 + h/2 * ( f + f1);
                cout<<"y: "<<y1<<"   ";
                if(abs(y1-y1_0)<0.00001)
                {
                    cout<<"\nFinal result in is :  Y  "<<y1<<"    dy/dx  "<<f1<<endl<<endl<<endl;
                    flag=1;
                }
                else
                    y1_0 = y1;
            }
            y0 = y1;
            x0=x0+h;
      }
}







/ **** Divided difference table in newton interpolation ****/

#include<bits/stdc++.h>
using namespace std;
int main()
{
    int i,j,n;
    float xp,fp,sum,pi,x[10],f[10],a[10],d[10][10];
    cout<<"Enter the check point: ";
    cin>>n;
    cout<<"Enter the value of x : ";
    for(int i=1;i<=n;i++)
    {
        cin>>x[i];
    }
    cout<<"Enter the value of f(x) : ";
    for(int i=1;i<=n;i++)
    {
        cin>>f[i];
    }
    cout<<"Input the value of x to be count : ";
    cin>>xp;
    for(i=1;i<=n;i++)
    {
        for(int j=1;j<=n;j++)
        {
             d[i][j]=0;
        }
    }
    for(i=1;i<=n;i++)
    {
        d[i][1]=f[i];
    }
    for(j=2;j<=n;j++)
    {
        for(i=1;i<=(n-j+1);i++)
        {
            d[i][j]=(d[i+1][j-1]-d[i][j-1])/(x[i+j-1]-x[i]);
        }
    }
    cout<<"The value of x are : "<<endl;
    for(int i=1;i<=n;i++)
    {
        cout<<x[i]<<" ";
    }
    cout<<endl;
    cout<<"The value of f(x) are : "<<endl;
    for(int i=1;i<=n;i++)
    {
        cout<<f[i]<<"  ";
    }
    cout<<endl;
    cout<<"The given value of x is : "<<endl;
    cout<<xp<<endl;
    cout<<"The divided difference table : "<<endl;
    for(j=2;j<=n;j++)
    {
        for(i=1;i<=(n-j+1);i++)
        {
            cout<<d[i][j]<<"   ";
        }
        cout<<endl;
    }
    for(j=1;j<=n;j++)
    {
        a[j]=d[1][j];
    }
    sum=a[1];
    for(i=2;i<=n;i++)
    {
        pi=1.0;
        for(j=1;j<=(i-1);j++)
        {
            pi=pi*(xp-x[j]);
        }
        sum=sum+(a[i]*pi);
    }
    fp=sum;
    cout<<"For value "<<xp<<" we get : "<<fp<<endl;
}













/**** Lagrange interpolation ****/

#include <iostream>
#include <bits/stdc++.h>
using namespace std;
int main()
{
    float x[10],f[10];
    int n;
    float y,di,dv,t;
    cout<<"Enter the check point: ";
    cin>>n;

    cout<<"Enter the value of x : ";
    for(int i=0;i<n;i++)
    {
        cin>>x[i];
    }

    cout<<"Enter the value of f(x) : ";
    for(int i=0;i<n;i++)
    {
        cin>>f[i];
    }

    cout << "Enter x to be check : ";
    cin >> y;

    for(int i=0;i<n;i++)
    {
        di=1,dv=1;
        for(int j=0;j<n;j++)
            if(i!=j)
                di=di*(y-x[j]);
        for(int j=0;j<n;j++)
            if(i!=j)
                dv=dv*(x[i]-x[j]);
        t+=(di/dv)*f[i];
    }

    cout <<"The value of x are : "<<endl;
    for(int i=0;i<n;i++)
    {
        cout <<x[i]<<"  ";
    }
    cout <<endl<<endl;
    cout <<"The given function f(x) value are : "<<endl;
    for(int i=0;i<n;i++)
    {
        cout <<f[i]<<"  ";
    }
    cout <<endl<<endl;
    cout <<"The value of x to be check : "<<endl;
    cout <<y<<endl;
    cout << "Interpolation " << "F(" << y << ") = " << t;
    return 0;
}
